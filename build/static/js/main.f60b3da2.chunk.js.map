{"version":3,"sources":["pages/Home.js","Nav.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","loading","setLoading","darkTheme","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","filterCountries","filter","item","country","toLowerCase","includes","countries","sort","a","b","cases","map","i","Card","key","bg","text","className","style","margin","Img","id","variant","src","countryInfo","flag","Body","Title","Text","deaths","recovered","todayCases","todayDeaths","active","critical","backgroundColor","color","display","justifyContent","size","data-tip","textAlign","effect","CardDeck","value","displayType","thousandSeparator","fontSize","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","queries","columns","query","Nav","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oVAwNeA,MA3Mf,WAAiB,IAAD,EACcC,mBAAS,IADvB,mBACPC,EADO,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgCJ,mBAAS,IAHzC,mBAGPK,EAHO,KAGUC,EAHV,OAIgBN,oBAAS,GAJzB,mBAIPO,EAJO,KAIEC,EAJF,OAKoBR,oBAAS,GAL7B,mBAKPS,EALO,UAOdC,qBAAU,WACRC,IACGC,IAAI,CACHD,IAAME,IAAI,oCACVF,IAAME,IAAI,4CAEXC,MAAK,SAACC,GACLb,EAAUa,EAAY,GAAGC,MACzBZ,EAAWW,EAAY,GAAGC,MAC1BR,GAAW,MAEZS,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,IAIH,IACMG,EADO,IAAIC,KAAKC,SAAStB,EAAOuB,UACbC,WAEnBC,EAAkBvB,EAAQwB,QAAO,SAACC,GACtC,MAA2B,KAApBvB,EAAyBuB,EAAKC,QAAQC,cAAcC,SAAS1B,EAAgByB,eAAiBF,KAQjGI,GAJMN,EAAgBO,MAAK,SAACC,EAAEC,GAClC,OAAOA,EAAEC,MAAQF,EAAEE,SAGHV,EAAgBW,KAAI,SAACrB,EAAMsB,GAC3C,OACE,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,GAAIhC,EAAY,OAAS,QACzBiC,KAAMjC,EAAY,QAAU,OAC5BkC,UAAU,cACVC,MAAO,CAAEC,OAAQ,SAGjB,kBAACN,EAAA,EAAKO,IAAN,CAAUC,GAAG,IAAIC,QAAQ,MAAMC,IAAKjC,EAAKkC,YAAYC,OACrD,kBAACZ,EAAA,EAAKa,KAAN,KACE,kBAACb,EAAA,EAAKc,MAAN,KAAarC,EAAKa,SAClB,kBAACU,EAAA,EAAKe,KAAN,cAAkBtC,EAAKoB,OACvB,kBAACG,EAAA,EAAKe,KAAN,eAAmBtC,EAAKuC,QACxB,kBAAChB,EAAA,EAAKe,KAAN,kBAAsBtC,EAAKwC,WAC3B,kBAACjB,EAAA,EAAKe,KAAN,sBAA0BtC,EAAKyC,YAC/B,kBAAClB,EAAA,EAAKe,KAAN,uBAA2BtC,EAAK0C,aAChC,kBAACnB,EAAA,EAAKe,KAAN,eAAmBtC,EAAK2C,QACxB,kBAACpB,EAAA,EAAKe,KAAN,iBAAqBtC,EAAK4C,gBA8BlC,OACE,yBAAKjB,UAAU,OACbC,MAAO,CACLiB,gBAAiBpD,EAAY,QAAU,QACvCqD,MAAOrD,EAAY,QAAU,UAG/B,6BACA,yBAAKmC,MAAO,CAAEmB,QAAS,OAAQC,eAAgB,WAC7C,kBAAC,IAAD,CAAYC,KAAM,GAAIH,MAAO,OAAQvD,QAASA,KAEhD,6BACA,wBAAIoC,UAAU,SACZuB,WAAS,wCACTtB,MAAO,CAAEuB,UAAW,WAFtB,YAMA,kBAAC,IAAD,CAAcC,OAAO,UAYrB,6BAEA,kBAACC,EAAA,EAAD,KACE,kBAAC9B,EAAA,EAAD,CACEE,GAAG,YACHC,KAAK,QACLC,UAAU,cACVC,MAAO,CAAEC,OAAQ,SAEjB,kBAACN,EAAA,EAAKa,KAAN,KACE,kBAACb,EAAA,EAAKc,MAAN,cAEA,kBAAC,IAAD,CACEiB,MAAOrE,EAAOmC,MACdmC,YAAa,OACbC,mBAAmB,EACnB5B,MAAO,CAAE6B,SAAU,WAGvB,kBAAClC,EAAA,EAAKmC,OAAN,KACE,+CAAqBrD,KAGzB,kBAACkB,EAAA,EAAD,CACEE,GAAG,SACHC,KAAM,QACNC,UAAU,cACVC,MAAO,CAAEC,OAAQ,SAEjB,kBAACN,EAAA,EAAKa,KAAN,KACE,kBAACb,EAAA,EAAKc,MAAN,eACA,kBAACd,EAAA,EAAKe,KAAN,KACG,IACD,kBAAC,IAAD,CACEgB,MAAOrE,EAAOsD,OACdgB,YAAa,OACbC,mBAAmB,EACnB5B,MAAO,CAAE6B,SAAU,YAIzB,kBAAClC,EAAA,EAAKmC,OAAN,KACE,+CAAqBrD,KAGzB,kBAACkB,EAAA,EAAD,CACEE,GAAG,UACHC,KAAM,QACNC,UAAU,cACVC,MAAO,CAAEC,OAAQ,SAEjB,kBAACN,EAAA,EAAKa,KAAN,KACE,kBAACb,EAAA,EAAKc,MAAN,kBACA,kBAACd,EAAA,EAAKe,KAAN,KACG,IACD,kBAAC,IAAD,CACEgB,MAAOrE,EAAOuD,UACde,YAAa,OACbC,mBAAmB,EACnB5B,MAAO,CAAE6B,SAAU,YAIzB,kBAAClC,EAAA,EAAKmC,OAAN,KACE,+CAAqBrD,MAM3B,kBAACsD,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBAClB,kBAACF,EAAA,EAAKG,QAAN,CACErC,GAAG,OACHsC,KAAK,OACLC,YAAY,uBACZC,SAAU,SAACC,GAAD,OAAO5E,EAAmB4E,EAAEC,OAAOb,WAInD,kBAACK,EAAA,EAAD,MAGA,kBAAC,IAAD,CAASS,QA/HC,CACZ,CACEC,QAAS,EACTC,MAAO,oBAET,CACED,QAAS,EACTC,MAAO,uBAwHqBtD,K,MCvKnBuD,MAxCf,WACE,OACE,+BCOWb,MAVf,WACE,OACE,gCACE,gC,gBCoBSc,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAW5F,KAK3C,kBAAC,EAAD,SCRY6F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1F,MAAK,SAAA2F,GACJA,EAAaC,gBAEdzF,OAAM,SAAA0F,GACLxF,QAAQwF,MAAMA,EAAMC,c","file":"static/js/main.f60b3da2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card, { CardBody, CardTitle } from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\nimport NumberFormat from \"react-number-format\";\nimport ReactTooltip from \"react-tooltip\";\nimport RingLoader from \"react-spinners/RingLoader\";\n// import Toggle from \"react-toggle\";\nimport \"react-toggle/style.css\";\n\nfunction Home() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [darkTheme, setDarkTheme] = useState(false);\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n      ])\n      .then((responseArr) => {\n        setLatest(responseArr[0].data);\n        setResults(responseArr[1].data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  \n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter((item) => {\n    return searchCountries !== \"\" ? item.country.toLowerCase().includes(searchCountries.toLowerCase()) : item;\n    \n  });\n\n  const con = filterCountries.sort((a,b) =>{\n    return b.cases - a.cases\n  })\n\n  const countries = filterCountries.map((data, i) => {\n    return (\n      <Card\n        key={i}\n        bg={darkTheme ? \"dark\" : \"light\"}\n        text={darkTheme ? \"light\" : \"dark\"}\n        className=\"text-center\"\n        style={{ margin: \"10px\" }}\n      >\n        \n        <Card.Img id=\"a\" variant=\"top\" src={data.countryInfo.flag} />\n        <Card.Body >\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  });\n  \n\n  // const countries = filterCountries.map((data,i) => {\n  //   return (\n  //     <Card.Body>\n  //       <Card.Title>{data.cases}</Card.Title>\n  //     </Card.Body>\n  //   )\n  // })\n\n  var queries = [\n    {\n      columns: 2,\n      query: \"min-width: 500px\",\n    },\n    {\n      columns: 3,\n      query: \"min-width: 1000px\",\n    },\n  ];\n\n  const handleDarkThemeChange = () => {\n    setDarkTheme(!darkTheme);\n  };\n\n  return (\n    <div className=\"home\"\n      style={{\n        backgroundColor: darkTheme ? \"black\" : \"white\",\n        color: darkTheme ? \"white\" : \"black\",\n      }}\n    >\n      <br />\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <RingLoader size={50} color={\"gray\"} loading={loading} />\n      </div>\n      <br />\n      <h2 className='header'\n        data-tip=\"Last modified date: 16/05/2020 - v2.2\"\n        style={{ textAlign: \"center\" }}\n      >\n        COVID-19  \n      </h2>\n      <ReactTooltip effect=\"solid\" />\n      \n      {/* <div style={{ textAlign: \"center\" }}>\n        <Toggle\n          defaultChecked={false}\n          icons={{\n            checked: \"🌜\",\n            unchecked: \"🌞\",\n          }}\n          onChange={handleDarkThemeChange}\n        />\n      </div> */}\n      <br />\n     \n      <CardDeck>\n        <Card\n          bg=\"secondary\"\n          text=\"white\"\n          className=\"text-center\"\n          style={{ margin: \"10px\" }}\n        >\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            {/* <Card.Text>{latest.cases}</Card.Text> */}\n            <NumberFormat\n              value={latest.cases}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              style={{ fontSize: \"30px\" }}\n            />\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card\n          bg=\"danger\"\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: \"10px\" }}\n        >\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>\n              {\" \"}\n              <NumberFormat\n                value={latest.deaths}\n                displayType={\"text\"}\n                thousandSeparator={true}\n                style={{ fontSize: \"30px\" }}\n              />\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card\n          bg=\"success\"\n          text={\"white\"}\n          className=\"text-center\"\n          style={{ margin: \"10px\" }}\n        >\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>\n              {\" \"}\n              <NumberFormat\n                value={latest.recovered}\n                displayType={\"text\"}\n                thousandSeparator={true}\n                style={{ fontSize: \"30px\" }}\n              />\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n          \n        </Card>\n        \n      </CardDeck>\n      <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control\n            bg=\"dark\"\n            type=\"text\"\n            placeholder=\"Search for countries\"\n            onChange={(e) => setSearchCountries(e.target.value)}\n          />\n        </Form.Group>\n      \n      <Form>\n       \n      </Form>\n      <Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n// import { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <nav>\n      {/* <Link style={{ color: \"white\", textDecoration: \"none\" }} to=\"/\">\n        <div style={{ fontSize: \"30px\" }}>🌏</div>\n      </Link>\n      <ul className=\"nav-links\">\n        <Link\n          style={{\n            color: \"white\",\n            textDecoration: \"none\",\n            marginTop: \"10px\",\n            marginRight: \"40px\",\n          }}\n          to=\"/symptom\"\n        >\n          <li>Symptom</li>\n        </Link>\n        <Link\n          style={{\n            color: \"white\",\n            textDecoration: \"none\",\n            marginTop: \"10px\",\n            marginRight: \"40px\",\n          }}\n          to=\"/graph\"\n        >\n          <li>Graph</li>\n        </Link>\n        <Link\n          style={{ color: \"white\", textDecoration: \"none\", marginTop: \"10px\" }}\n          to=\"/about\"\n        >\n          <li>About</li>\n        </Link>\n      </ul> */}\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Footer() {\n  return (\n    <footer>\n      <div>\n        \n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect, useState } from \"react\";\nimport Home from \"./pages/Home\";\n// import About from \"./pages/About\";\n// import Graph from \"./pages/Graph\";\nimport Nav from \"./Nav\";\nimport Footer from \"./Footer\";\n// import Symptom from \"./pages/Symptom\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/covid-19\" component={Home} />\n          {/* <Route path=\"/symptom\" component={Symptom} />\n          <Route path=\"/graph\" component={Graph} />\n          <Route path=\"/about\" component={About} /> */}\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}